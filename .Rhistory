adjust.param <- 0.5
if (output.directory != "")  {
filename <- paste(output.directory, doc.string, "_params.txt", sep="", collapse="")
time.string <- as.character(as.POSIXlt(Sys.time(),"GMT"))
write(paste("Run of GSEA on ", time.string), file=filename)
if (is.data.frame(input.ds)) {
#      write(paste("input.ds=", quote(input.ds), sep=" "), file=filename, append=T)
} else {
write(paste("input.ds=", input.ds, sep=" "), file=filename, append=T)
}
if (is.list(input.cls)) {
#      write(paste("input.cls=", input.cls, sep=" "), file=filename, append=T)
} else {
write(paste("input.cls=", input.cls, sep=" "), file=filename, append=T)
}
if (is.data.frame(gene.ann)) {
#    write(paste("gene.ann =", gene.ann, sep=" "), file=filename, append=T)
} else {
write(paste("gene.ann =", gene.ann, sep=" "), file=filename, append=T)
}
if (regexpr(pattern=".gmt", gs.db[1]) == -1) {
#   write(paste("gs.db=", gs.db, sep=" "), file=filename, append=T)
} else {
write(paste("gs.db=", gs.db, sep=" "), file=filename, append=T)
}
if (is.data.frame(gs.ann)) {
#    write(paste("gene.ann =", gene.ann, sep=" "), file=filename, append=T)
} else {
write(paste("gs.ann =", gs.ann, sep=" "), file=filename, append=T)
}
write(paste("output.directory =", output.directory, sep=" "), file=filename, append=T)
write(paste("doc.string = ", doc.string, sep=" "), file=filename, append=T)
write(paste("non.interactive.run =", non.interactive.run, sep=" "), file=filename, append=T)
write(paste("reshuffling.type =", reshuffling.type, sep=" "), file=filename, append=T)
write(paste("nperm =", nperm, sep=" "), file=filename, append=T)
write(paste("weighted.score.type =", weighted.score.type, sep=" "), file=filename, append=T)
write(paste("nom.p.val.threshold =", nom.p.val.threshold, sep=" "), file=filename, append=T)
write(paste("fwer.p.val.threshold =", fwer.p.val.threshold, sep=" "), file=filename, append=T)
write(paste("fdr.q.val.threshold =", fdr.q.val.threshold, sep=" "), file=filename, append=T)
write(paste("topgs =", topgs, sep=" "), file=filename, append=T)
write(paste("adjust.FDR.q.val =", adjust.FDR.q.val, sep=" "), file=filename, append=T)
write(paste("gs.size.threshold.min =", gs.size.threshold.min, sep=" "), file=filename, append=T)
write(paste("gs.size.threshold.max =", gs.size.threshold.max, sep=" "), file=filename, append=T)
write(paste("reverse.sign =", reverse.sign, sep=" "), file=filename, append=T)
write(paste("preproc.type =", preproc.type, sep=" "), file=filename, append=T)
write(paste("random.seed =", random.seed, sep=" "), file=filename, append=T)
write(paste("perm.type =", perm.type, sep=" "), file=filename, append=T)
write(paste("fraction =", fraction, sep=" "), file=filename, append=T)
write(paste("replace =", replace, sep=" "), file=filename, append=T)
}
input.cls.name=pheno.input
print(" *** Running GSEA Analysis...")
if (OLD.GSEA == T) {
print("Running OLD GSEA from Mootha et al 2003")
}
if (output.directory != "")  {
filename <- paste(output.directory, doc.string, "_params.txt", sep="", collapse="")
time.string <- as.character(as.POSIXlt(Sys.time(),"GMT"))
write(paste("Run of GSEA on ", time.string), file=filename)
if (is.data.frame(input.ds)) {
#      write(paste("input.ds=", quote(input.ds), sep=" "), file=filename, append=T)
} else {
write(paste("input.ds=", input.ds, sep=" "), file=filename, append=T)
}
if (is.list(input.cls)) {
#      write(paste("input.cls=", input.cls, sep=" "), file=filename, append=T)
} else {
write(paste("input.cls=", input.cls, sep=" "), file=filename, append=T)
}
if (is.data.frame(gene.ann)) {
#    write(paste("gene.ann =", gene.ann, sep=" "), file=filename, append=T)
} else {
write(paste("gene.ann =", gene.ann, sep=" "), file=filename, append=T)
}
if (regexpr(pattern=".gmt", gs.db[1]) == -1) {
#   write(paste("gs.db=", gs.db, sep=" "), file=filename, append=T)
} else {
write(paste("gs.db=", gs.db, sep=" "), file=filename, append=T)
}
if (is.data.frame(gs.ann)) {
#    write(paste("gene.ann =", gene.ann, sep=" "), file=filename, append=T)
} else {
write(paste("gs.ann =", gs.ann, sep=" "), file=filename, append=T)
}
write(paste("output.directory =", output.directory, sep=" "), file=filename, append=T)
write(paste("doc.string = ", doc.string, sep=" "), file=filename, append=T)
write(paste("non.interactive.run =", non.interactive.run, sep=" "), file=filename, append=T)
write(paste("reshuffling.type =", reshuffling.type, sep=" "), file=filename, append=T)
write(paste("nperm =", nperm, sep=" "), file=filename, append=T)
write(paste("weighted.score.type =", weighted.score.type, sep=" "), file=filename, append=T)
write(paste("nom.p.val.threshold =", nom.p.val.threshold, sep=" "), file=filename, append=T)
write(paste("fwer.p.val.threshold =", fwer.p.val.threshold, sep=" "), file=filename, append=T)
write(paste("fdr.q.val.threshold =", fdr.q.val.threshold, sep=" "), file=filename, append=T)
write(paste("topgs =", topgs, sep=" "), file=filename, append=T)
write(paste("adjust.FDR.q.val =", adjust.FDR.q.val, sep=" "), file=filename, append=T)
write(paste("gs.size.threshold.min =", gs.size.threshold.min, sep=" "), file=filename, append=T)
write(paste("gs.size.threshold.max =", gs.size.threshold.max, sep=" "), file=filename, append=T)
write(paste("reverse.sign =", reverse.sign, sep=" "), file=filename, append=T)
write(paste("preproc.type =", preproc.type, sep=" "), file=filename, append=T)
write(paste("random.seed =", random.seed, sep=" "), file=filename, append=T)
write(paste("perm.type =", perm.type, sep=" "), file=filename, append=T)
write(paste("fraction =", fraction, sep=" "), file=filename, append=T)
write(paste("replace =", replace, sep=" "), file=filename, append=T)
}
if (.Platform$OS.type == "windows") {
memory.limit(6000000000)
memory.limit()
#      print(c("Start memory size=",  memory.size()))
}
input.cls=input.cls.name
print(" *** Running GSEA Analysis...")
if (OLD.GSEA == T) {
print("Running OLD GSEA from Mootha et al 2003")
}
if (output.directory != "")  {
filename <- paste(output.directory, doc.string, "_params.txt", sep="", collapse="")
time.string <- as.character(as.POSIXlt(Sys.time(),"GMT"))
write(paste("Run of GSEA on ", time.string), file=filename)
if (is.data.frame(input.ds)) {
#      write(paste("input.ds=", quote(input.ds), sep=" "), file=filename, append=T)
} else {
write(paste("input.ds=", input.ds, sep=" "), file=filename, append=T)
}
if (is.list(input.cls)) {
#      write(paste("input.cls=", input.cls, sep=" "), file=filename, append=T)
} else {
write(paste("input.cls=", input.cls, sep=" "), file=filename, append=T)
}
if (is.data.frame(gene.ann)) {
#    write(paste("gene.ann =", gene.ann, sep=" "), file=filename, append=T)
} else {
write(paste("gene.ann =", gene.ann, sep=" "), file=filename, append=T)
}
if (regexpr(pattern=".gmt", gs.db[1]) == -1) {
#   write(paste("gs.db=", gs.db, sep=" "), file=filename, append=T)
} else {
write(paste("gs.db=", gs.db, sep=" "), file=filename, append=T)
}
if (is.data.frame(gs.ann)) {
#    write(paste("gene.ann =", gene.ann, sep=" "), file=filename, append=T)
} else {
write(paste("gs.ann =", gs.ann, sep=" "), file=filename, append=T)
}
write(paste("output.directory =", output.directory, sep=" "), file=filename, append=T)
write(paste("doc.string = ", doc.string, sep=" "), file=filename, append=T)
write(paste("non.interactive.run =", non.interactive.run, sep=" "), file=filename, append=T)
write(paste("reshuffling.type =", reshuffling.type, sep=" "), file=filename, append=T)
write(paste("nperm =", nperm, sep=" "), file=filename, append=T)
write(paste("weighted.score.type =", weighted.score.type, sep=" "), file=filename, append=T)
write(paste("nom.p.val.threshold =", nom.p.val.threshold, sep=" "), file=filename, append=T)
write(paste("fwer.p.val.threshold =", fwer.p.val.threshold, sep=" "), file=filename, append=T)
write(paste("fdr.q.val.threshold =", fdr.q.val.threshold, sep=" "), file=filename, append=T)
write(paste("topgs =", topgs, sep=" "), file=filename, append=T)
write(paste("adjust.FDR.q.val =", adjust.FDR.q.val, sep=" "), file=filename, append=T)
write(paste("gs.size.threshold.min =", gs.size.threshold.min, sep=" "), file=filename, append=T)
write(paste("gs.size.threshold.max =", gs.size.threshold.max, sep=" "), file=filename, append=T)
write(paste("reverse.sign =", reverse.sign, sep=" "), file=filename, append=T)
write(paste("preproc.type =", preproc.type, sep=" "), file=filename, append=T)
write(paste("random.seed =", random.seed, sep=" "), file=filename, append=T)
write(paste("perm.type =", perm.type, sep=" "), file=filename, append=T)
write(paste("fraction =", fraction, sep=" "), file=filename, append=T)
write(paste("replace =", replace, sep=" "), file=filename, append=T)
}
data(key)
head(key)
GO_mf_filename=database_key("GO molecular function")
GO_mf_filename
descriptive_names=database_key("all")
head(descriptive_names)
data(hallmark.gs)
data(C1.gs)
sets=get_genesets(hallmark.gs)
head(sets)
data(aagmex_expr)
expr.input=aagmex_expr
expr.input[1:4,1:6]
data(aagmex_pheno)
pheno.input=aagmex_pheno
pheno.input$phen
head(pheno.input$class.v)
data(hallmark.gs)
gene.set.input=hallmark.gs
input.ds.name=expr.input
input.cls.name=pheno.input
gene.set.input=gene.set.input
doc.string="results"
nperm=100 #supposed to be 1000
fdr.q.val.threshold = 0.25
abs.val=F
gs.size.threshold.max=999999 #was 1000
bar_percent=0.1
gap_percent=0.1
under_percent=0.1
upper_percent=0.1
color_line="black"
color_tick="green"
#variables from Run.GSEA.022319.R
wd_new=getwd()
input.ds=expr.input
gs.db =   gene.set.input
output.directory = paste0(wd_new,"/", doc.string,"/")
output.directory2 =paste0(wd_new,"/")
doc.string            = doc.string
non.interactive.run   = T
reshuffling.type      = "sample.labels"
nperm                 = nperm
weighted.score.type   =  1
nom.p.val.threshold   = -1
fwer.p.val.threshold  = -1
fdr.q.val.threshold   = 0.25
topgs                 = 20
adjust.FDR.q.val      = F
gs.size.threshold.min = 0 #2
gs.size.threshold.max = gs.size.threshold.max
reverse.sign          = F
preproc.type          = 0
random.seed           = 3338
perm.type             = 0
fraction              = 1.0
replace               = F
save.intermediate.results = F
OLD.GSEA              = F
use.fast.enrichment.routine = T
abs.val=abs.val
#additional from GSEA.1.0.sei3.R
gene.ann = ""
gs.ann = ""
print(" *** Running GSEA Analysis...")
if (OLD.GSEA == T) {
print("Running OLD GSEA from Mootha et al 2003")
}
if (output.directory != "")  {
filename <- paste(output.directory, doc.string, "_params.txt", sep="", collapse="")
time.string <- as.character(as.POSIXlt(Sys.time(),"GMT"))
write(paste("Run of GSEA on ", time.string), file=filename)
if (is.data.frame(input.ds)) {
#      write(paste("input.ds=", quote(input.ds), sep=" "), file=filename, append=T)
} else {
write(paste("input.ds=", input.ds, sep=" "), file=filename, append=T)
}
if (is.list(input.cls)) {
#      write(paste("input.cls=", input.cls, sep=" "), file=filename, append=T)
} else {
write(paste("input.cls=", input.cls, sep=" "), file=filename, append=T)
}
if (is.data.frame(gene.ann)) {
#    write(paste("gene.ann =", gene.ann, sep=" "), file=filename, append=T)
} else {
write(paste("gene.ann =", gene.ann, sep=" "), file=filename, append=T)
}
if (regexpr(pattern=".gmt", gs.db[1]) == -1) {
#   write(paste("gs.db=", gs.db, sep=" "), file=filename, append=T)
} else {
write(paste("gs.db=", gs.db, sep=" "), file=filename, append=T)
}
if (is.data.frame(gs.ann)) {
#    write(paste("gene.ann =", gene.ann, sep=" "), file=filename, append=T)
} else {
write(paste("gs.ann =", gs.ann, sep=" "), file=filename, append=T)
}
write(paste("output.directory =", output.directory, sep=" "), file=filename, append=T)
write(paste("doc.string = ", doc.string, sep=" "), file=filename, append=T)
write(paste("non.interactive.run =", non.interactive.run, sep=" "), file=filename, append=T)
write(paste("reshuffling.type =", reshuffling.type, sep=" "), file=filename, append=T)
write(paste("nperm =", nperm, sep=" "), file=filename, append=T)
write(paste("weighted.score.type =", weighted.score.type, sep=" "), file=filename, append=T)
write(paste("nom.p.val.threshold =", nom.p.val.threshold, sep=" "), file=filename, append=T)
write(paste("fwer.p.val.threshold =", fwer.p.val.threshold, sep=" "), file=filename, append=T)
write(paste("fdr.q.val.threshold =", fdr.q.val.threshold, sep=" "), file=filename, append=T)
write(paste("topgs =", topgs, sep=" "), file=filename, append=T)
write(paste("adjust.FDR.q.val =", adjust.FDR.q.val, sep=" "), file=filename, append=T)
write(paste("gs.size.threshold.min =", gs.size.threshold.min, sep=" "), file=filename, append=T)
write(paste("gs.size.threshold.max =", gs.size.threshold.max, sep=" "), file=filename, append=T)
write(paste("reverse.sign =", reverse.sign, sep=" "), file=filename, append=T)
write(paste("preproc.type =", preproc.type, sep=" "), file=filename, append=T)
write(paste("random.seed =", random.seed, sep=" "), file=filename, append=T)
write(paste("perm.type =", perm.type, sep=" "), file=filename, append=T)
write(paste("fraction =", fraction, sep=" "), file=filename, append=T)
write(paste("replace =", replace, sep=" "), file=filename, append=T)
}
if (.Platform$OS.type == "windows") {
memory.limit(6000000000)
memory.limit()
#      print(c("Start memory size=",  memory.size()))
}
input.cls.name=""
input.cls=input.cls.name
print(" *** Running GSEA Analysis...")
if (OLD.GSEA == T) {
print("Running OLD GSEA from Mootha et al 2003")
}
if (output.directory != "")  {
filename <- paste(output.directory, doc.string, "_params.txt", sep="", collapse="")
time.string <- as.character(as.POSIXlt(Sys.time(),"GMT"))
write(paste("Run of GSEA on ", time.string), file=filename)
if (is.data.frame(input.ds)) {
#      write(paste("input.ds=", quote(input.ds), sep=" "), file=filename, append=T)
} else {
write(paste("input.ds=", input.ds, sep=" "), file=filename, append=T)
}
if (is.list(input.cls)) {
#      write(paste("input.cls=", input.cls, sep=" "), file=filename, append=T)
} else {
write(paste("input.cls=", input.cls, sep=" "), file=filename, append=T)
}
if (is.data.frame(gene.ann)) {
#    write(paste("gene.ann =", gene.ann, sep=" "), file=filename, append=T)
} else {
write(paste("gene.ann =", gene.ann, sep=" "), file=filename, append=T)
}
if (regexpr(pattern=".gmt", gs.db[1]) == -1) {
#   write(paste("gs.db=", gs.db, sep=" "), file=filename, append=T)
} else {
write(paste("gs.db=", gs.db, sep=" "), file=filename, append=T)
}
if (is.data.frame(gs.ann)) {
#    write(paste("gene.ann =", gene.ann, sep=" "), file=filename, append=T)
} else {
write(paste("gs.ann =", gs.ann, sep=" "), file=filename, append=T)
}
write(paste("output.directory =", output.directory, sep=" "), file=filename, append=T)
write(paste("doc.string = ", doc.string, sep=" "), file=filename, append=T)
write(paste("non.interactive.run =", non.interactive.run, sep=" "), file=filename, append=T)
write(paste("reshuffling.type =", reshuffling.type, sep=" "), file=filename, append=T)
write(paste("nperm =", nperm, sep=" "), file=filename, append=T)
write(paste("weighted.score.type =", weighted.score.type, sep=" "), file=filename, append=T)
write(paste("nom.p.val.threshold =", nom.p.val.threshold, sep=" "), file=filename, append=T)
write(paste("fwer.p.val.threshold =", fwer.p.val.threshold, sep=" "), file=filename, append=T)
write(paste("fdr.q.val.threshold =", fdr.q.val.threshold, sep=" "), file=filename, append=T)
write(paste("topgs =", topgs, sep=" "), file=filename, append=T)
write(paste("adjust.FDR.q.val =", adjust.FDR.q.val, sep=" "), file=filename, append=T)
write(paste("gs.size.threshold.min =", gs.size.threshold.min, sep=" "), file=filename, append=T)
write(paste("gs.size.threshold.max =", gs.size.threshold.max, sep=" "), file=filename, append=T)
write(paste("reverse.sign =", reverse.sign, sep=" "), file=filename, append=T)
write(paste("preproc.type =", preproc.type, sep=" "), file=filename, append=T)
write(paste("random.seed =", random.seed, sep=" "), file=filename, append=T)
write(paste("perm.type =", perm.type, sep=" "), file=filename, append=T)
write(paste("fraction =", fraction, sep=" "), file=filename, append=T)
write(paste("replace =", replace, sep=" "), file=filename, append=T)
}
if (.Platform$OS.type == "windows") {
memory.limit(6000000000)
memory.limit()
#      print(c("Start memory size=",  memory.size()))
}
set.seed(seed=random.seed, kind = NULL)
adjust.param <- 0.5
gc()
time1 <- proc.time()
if (is.data.frame(input.ds)) {
dataset <- input.ds
} else {
if (regexpr(pattern=".gct", input.ds) == -1) {
dataset <- GSEA.Res2Frame(filename = input.ds)
} else {
#         dataset <- GSEA.Gct2Frame(filename = input.ds)
dataset <- GSEA.Gct2Frame2(filename = input.ds)
}
}
gene.labels <- row.names(dataset)
sample.names <- names(dataset)
A <- data.matrix(dataset)
dim(A)
cols <- length(A[1,])
rows <- length(A[,1])
if (preproc.type == 1) {  # Column normalize (Z-score)
A <- GSEA.NormalizeCols(A)
} else if (preproc.type == 2) { # Column (rank) and row (Z-score) normalize
for (j in 1:cols) {  # column rank normalization
A[,j] <- rank(A[,j])
}
A <- GSEA.NormalizeRows(A)
} else if (preproc.type == 3) { # Column (rank) norm.
for (j in 1:cols) {  # column rank normalization
A[,j] <- rank(A[,j])
}
}
if(is.list(input.cls)) {
CLS <- input.cls
} else {
CLS <- GSEA.ReadClsFile(file=input.cls)
}
if(is.list(input.cls)) {
CLS <- input.cls
} else {
CLS <- GSEA.ReadClsFile(file=input.cls)
}
library(GSEAplot)
data(key)
head(key)
GO_mf_filename=database_key("GO molecular function")
GO_mf_filename
descriptive_names=database_key("all")
head(descriptive_names)
data(hallmark.gs)
data(C1.gs)
sets=get_genesets(hallmark.gs)
head(sets)
data(aagmex_expr)
expr.input=aagmex_expr
expr.input[1:4,1:6]
data(aagmex_pheno)
pheno.input=aagmex_pheno
pheno.input$phen
head(pheno.input$class.v)
data(hallmark.gs)
gene.set.input=hallmark.gs
input.ds.name=expr.input
input.cls.name=pheno.input
gene.set.input=gene.set.input
doc.string="results"
nperm=100fdr.q.val.threshold = 0.25
abs.val=F
bar_percent=0.1
gap_percent=0.1
under_percent=0.1
upper_percent=0.1
color_line="black"
color_tick="green"
gs.size.threshold.min=2
input.cls.name=""
input.ds=input.ds.name
input.cls=input.cls.name
gs.db =   gene.set.input
output.directory = paste0(wd_new,"/", doc.string,"/")
output.directory2 =paste0(wd_new,"/")
doc.string = doc.string
non.interactive.run = T
reshuffling.type      = "sample.labels"
nperm                 = nperm
weighted.score.type   =  1
nom.p.val.threshold   = -1
fwer.p.val.threshold  = -1
fdr.q.val.threshold   = 0.25
topgs                 = 20
adjust.FDR.q.val      = F
gs.size.threshold.min = gs.size.threshold.min
gs.size.threshold.max = gs.size.threshold.max
reverse.sign          = F
preproc.type          = 0
random.seed           = 3338
perm.type             = 0
fraction              = 1.0
replace               = F
save.intermediate.results = F
OLD.GSEA              = F
use.fast.enrichment.routine = T
abs.val=abs.val
print(" *** Running GSEA Analysis...")
if (OLD.GSEA == T) {
print("Running OLD GSEA from Mootha et al 2003")
}
if (output.directory != "")  {
filename <- paste(output.directory, doc.string, "_params.txt", sep="", collapse="")
time.string <- as.character(as.POSIXlt(Sys.time(),"GMT"))
write(paste("Run of GSEA on ", time.string), file=filename)
if (is.data.frame(input.ds)) {
#      write(paste("input.ds=", quote(input.ds), sep=" "), file=filename, append=T)
} else {
write(paste("input.ds=", input.ds, sep=" "), file=filename, append=T)
}
if (is.list(input.cls)) {
#      write(paste("input.cls=", input.cls, sep=" "), file=filename, append=T)
} else {
write(paste("input.cls=", input.cls, sep=" "), file=filename, append=T)
}
if (is.data.frame(gene.ann)) {
#    write(paste("gene.ann =", gene.ann, sep=" "), file=filename, append=T)
} else {
write(paste("gene.ann =", gene.ann, sep=" "), file=filename, append=T)
}
if (regexpr(pattern=".gmt", gs.db[1]) == -1) {
#   write(paste("gs.db=", gs.db, sep=" "), file=filename, append=T)
} else {
write(paste("gs.db=", gs.db, sep=" "), file=filename, append=T)
}
if (is.data.frame(gs.ann)) {
#    write(paste("gene.ann =", gene.ann, sep=" "), file=filename, append=T)
} else {
write(paste("gs.ann =", gs.ann, sep=" "), file=filename, append=T)
}
write(paste("output.directory =", output.directory, sep=" "), file=filename, append=T)
write(paste("doc.string = ", doc.string, sep=" "), file=filename, append=T)
write(paste("non.interactive.run =", non.interactive.run, sep=" "), file=filename, append=T)
write(paste("reshuffling.type =", reshuffling.type, sep=" "), file=filename, append=T)
write(paste("nperm =", nperm, sep=" "), file=filename, append=T)
write(paste("weighted.score.type =", weighted.score.type, sep=" "), file=filename, append=T)
write(paste("nom.p.val.threshold =", nom.p.val.threshold, sep=" "), file=filename, append=T)
write(paste("fwer.p.val.threshold =", fwer.p.val.threshold, sep=" "), file=filename, append=T)
write(paste("fdr.q.val.threshold =", fdr.q.val.threshold, sep=" "), file=filename, append=T)
write(paste("topgs =", topgs, sep=" "), file=filename, append=T)
write(paste("adjust.FDR.q.val =", adjust.FDR.q.val, sep=" "), file=filename, append=T)
write(paste("gs.size.threshold.min =", gs.size.threshold.min, sep=" "), file=filename, append=T)
write(paste("gs.size.threshold.max =", gs.size.threshold.max, sep=" "), file=filename, append=T)
write(paste("reverse.sign =", reverse.sign, sep=" "), file=filename, append=T)
write(paste("preproc.type =", preproc.type, sep=" "), file=filename, append=T)
write(paste("random.seed =", random.seed, sep=" "), file=filename, append=T)
write(paste("perm.type =", perm.type, sep=" "), file=filename, append=T)
write(paste("fraction =", fraction, sep=" "), file=filename, append=T)
write(paste("replace =", replace, sep=" "), file=filename, append=T)
}
if (.Platform$OS.type == "windows") {
memory.limit(6000000000)
memory.limit()
#      print(c("Start memory size=",  memory.size()))
}
#install.packages('devtools')
#install.packages('remotes')
library(devtools)
library(remotes)
remotes::install_github("kelsiereinaltt/GSEAplot")
getwd()
