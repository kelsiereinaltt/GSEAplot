source("Run.GSEA.022319.R")
#added############################################################################
data(hallmark.gs)
d0 = hallmark.gs
#data(C1.gs)
#added##############################
# KLF14 targets
data(transf)
data(transm)
tx = t(c("KLF14targets","source",transf[,1],transm[,1]))
d1 = add_to_database(database=d0, addition=tx)
# receptors/ligands
data(Kadoki_ligands.db)
data(Kadoki_receptors.db)
d2 = c(d1, Kadoki_ligands.db, Kadoki_receptors.db)
# transcription factors
data(ENCODE.db)
d3 = c(d2, ENCODE.db)
#added##############################
#
# sets=get_genesets(hallmark.gs)
# head(sets)
#
# data(aagmex_expr)
# expr.input=aagmex_expr
# expr.input[1:4,1:6]
#
# data(aagmex_pheno)
# pheno.input=aagmex_pheno
# pheno.input$phen
# head(pheno.input$class.v)
#
# data(hallmark.gs)
# gene.set.input=hallmark.gs
pp= GSEAplots(input.ds.name=expr.input,
input.cls.name=pheno.input,
#gene.set.input=gene.set.input,
gene.set.input=d3,
doc.string="kTest-6",
nperm=100,#supposed to be 1000
fdr.q.val.threshold = 0.25,
abs.val=F,
gs.size.threshold.max=1000,
bar_percent=0.1,
gap_percent=0.1,
under_percent=0.1,
upper_percent=0.1,
color_line="black",
color_tick="green")
pp$plots[[1]]
plot.ES(list.of.plots=pp$plots,plotname="kTest-6")
source('~/Documents/GSEA.plot-Kelsie/R/GSEATestRun.R')
View(GSEAplots)
abs(-921)
dir="/Users/kelsiereinaltt/Documents/GSEA.plot-Kelsie/R"
setwd(dir)
#remotes::install_github("sarah-innis/GSEA.plot")
#library(devtools)
#library(GSEA.plot)
#data(key)
#head(key)
#GO_mf_filename=database_key("GO molecular function")
#GO_mf_filename
#descriptive_names=database_key("all")
#head(descriptive_names)
#added############################################################################
dat = "/Users/kelsiereinaltt/Documents/GSEA.plot-Kelsie/deg.RData"
load(dat)
# function for getting indices of unique genes with min p-values
min.p.indices = function(dat=NULL){
ind_keep = c()
for(ii in 1:length(unique(dat$ID))){
ind = which(dat$ID == unique(dat$ID)[ii])
if(length(ind)==1){ind_keep = c(ind_keep, ind)}
if(length(ind)>1){
ind2 = which(dat$adj.P.Val[ind] == min(dat$adj.P.Val[ind]))
ind_keep = c(ind_keep, ind[ind2])
}
}
if(length(ind_keep)==length(unique(dat$ID))){return(ind_keep)}
}
# use gene ids for gtex
all(colnames(dat_F_gtex) == colnames(dat_M_gtex))
fname = "/Users/kelsiereinaltt/Documents/GSEApaper-Kelsie/gencode_gene_map.txt"
ann_gene0 = read.table(fname,header=T,sep="\t",stringsAsFactors=F,quote = "")
ggenes = sapply(colnames(dat_F_gtex),function(x){ann_gene0$gene_name[which(ann_gene0$gene_id==x)]})
colnames(dat_F_gtex) = colnames(dat_M_gtex) = ggenes
# specify phenotypes
pheno.input = list()
pheno.input[["phen"]] = c("Female","Male")
pheno.input[["class.v"]] = c(rep(0,nrow(dat_F_gtex)), rep(1,nrow(dat_M_gtex)))
# format expression data
expr.input = cbind(t(dat_F_gtex), t(dat_M_gtex)) %>% as.data.frame(stringsAsFactors=F)
# run GSEA.R and newGSEAplots.R
library(GSEA.plot)
# source("/Users/kelsiereinaltt/Documents/GSEApaper-Kelsie/GSEA.R")
# source("/Users/kelsiereinaltt/Documents/GSEApaper-Kelsie/newGSEAplots.R")
source("GSEA.1.0.sei3.R")
source("Run.GSEA.022319.R")
#added############################################################################
data(hallmark.gs)
d0 = hallmark.gs
#data(C1.gs)
#added##############################
# KLF14 targets
data(transf)
data(transm)
tx = t(c("KLF14targets","source",transf[,1],transm[,1]))
d1 = add_to_database(database=d0, addition=tx)
# receptors/ligands
data(Kadoki_ligands.db)
data(Kadoki_receptors.db)
d2 = c(d1, Kadoki_ligands.db, Kadoki_receptors.db)
# transcription factors
data(ENCODE.db)
d3 = c(d2, ENCODE.db)
#added##############################
#
# sets=get_genesets(hallmark.gs)
# head(sets)
#
# data(aagmex_expr)
# expr.input=aagmex_expr
# expr.input[1:4,1:6]
#
# data(aagmex_pheno)
# pheno.input=aagmex_pheno
# pheno.input$phen
# head(pheno.input$class.v)
#
# data(hallmark.gs)
# gene.set.input=hallmark.gs
pp= GSEAplots(input.ds.name=expr.input,
input.cls.name=pheno.input,
#gene.set.input=gene.set.input,
gene.set.input=d3,
doc.string="kTest-6",
nperm=100,#supposed to be 1000
fdr.q.val.threshold = 0.25,
abs.val=F,
gs.size.threshold.max=1000,
bar_percent=0.1,
gap_percent=0.1,
under_percent=0.1,
upper_percent=0.1,
color_line="black",
color_tick="green")
pp$plots[[1]]
plot.ES(list.of.plots=pp$plots,plotname="kTest-6")
dir="/Users/kelsiereinaltt/Documents/GSEA.plot-Kelsie/R"
setwd(dir)
#remotes::install_github("sarah-innis/GSEA.plot")
#library(devtools)
#library(GSEA.plot)
#data(key)
#head(key)
#GO_mf_filename=database_key("GO molecular function")
#GO_mf_filename
#descriptive_names=database_key("all")
#head(descriptive_names)
#added############################################################################
dat = "/Users/kelsiereinaltt/Documents/GSEA.plot-Kelsie/deg.RData"
load(dat)
# function for getting indices of unique genes with min p-values
min.p.indices = function(dat=NULL){
ind_keep = c()
for(ii in 1:length(unique(dat$ID))){
ind = which(dat$ID == unique(dat$ID)[ii])
if(length(ind)==1){ind_keep = c(ind_keep, ind)}
if(length(ind)>1){
ind2 = which(dat$adj.P.Val[ind] == min(dat$adj.P.Val[ind]))
ind_keep = c(ind_keep, ind[ind2])
}
}
if(length(ind_keep)==length(unique(dat$ID))){return(ind_keep)}
}
# use gene ids for gtex
all(colnames(dat_F_gtex) == colnames(dat_M_gtex))
fname = "/Users/kelsiereinaltt/Documents/GSEApaper-Kelsie/gencode_gene_map.txt"
ann_gene0 = read.table(fname,header=T,sep="\t",stringsAsFactors=F,quote = "")
ggenes = sapply(colnames(dat_F_gtex),function(x){ann_gene0$gene_name[which(ann_gene0$gene_id==x)]})
colnames(dat_F_gtex) = colnames(dat_M_gtex) = ggenes
# specify phenotypes
pheno.input = list()
pheno.input[["phen"]] = c("Female","Male")
pheno.input[["class.v"]] = c(rep(0,nrow(dat_F_gtex)), rep(1,nrow(dat_M_gtex)))
# format expression data
expr.input = cbind(t(dat_F_gtex), t(dat_M_gtex)) %>% as.data.frame(stringsAsFactors=F)
# run GSEA.R and newGSEAplots.R
library(GSEA.plot)
# source("/Users/kelsiereinaltt/Documents/GSEApaper-Kelsie/GSEA.R")
# source("/Users/kelsiereinaltt/Documents/GSEApaper-Kelsie/newGSEAplots.R")
source("GSEA.1.0.sei3.R")
source("Run.GSEA.022319.R")
#added############################################################################
data(hallmark.gs)
d0 = hallmark.gs
#data(C1.gs)
#added##############################
# KLF14 targets
data(transf)
data(transm)
tx = t(c("KLF14targets","source",transf[,1],transm[,1]))
d1 = add_to_database(database=d0, addition=tx)
# receptors/ligands
data(Kadoki_ligands.db)
data(Kadoki_receptors.db)
d2 = c(d1, Kadoki_ligands.db, Kadoki_receptors.db)
# transcription factors
data(ENCODE.db)
d3 = c(d2, ENCODE.db)
#added##############################
#
# sets=get_genesets(hallmark.gs)
# head(sets)
#
# data(aagmex_expr)
# expr.input=aagmex_expr
# expr.input[1:4,1:6]
#
# data(aagmex_pheno)
# pheno.input=aagmex_pheno
# pheno.input$phen
# head(pheno.input$class.v)
#
# data(hallmark.gs)
# gene.set.input=hallmark.gs
pp= GSEAplots(input.ds.name=expr.input,
input.cls.name=pheno.input,
#gene.set.input=gene.set.input,
gene.set.input=d3,
doc.string="kTest-6",
nperm=100,#supposed to be 1000
fdr.q.val.threshold = 0.25,
abs.val=F,
gs.size.threshold.max=1000,
bar_percent=0.1,
gap_percent=0.1,
under_percent=0.1,
upper_percent=0.1,
color_line="black",
color_tick="green")
pp$plots[[1]]
plot.ES(list.of.plots=pp$plots,plotname="kTest-6")
#' GSEA Source Code Functions
#'
#' These functions were written by the Broad Institute and published as a part of their attempt to make their Gene Set Enrichment Analysis able to be run in R. These functions are used within the functions written in this package. They are not meant to be used by the user but are made available if they need to be used.
#' @param x,y
#' @name GSEA_Source
#' @references Subramanian, Tamayo, et al. (2005), PNAS 102, 15545-15550, http://www.broad.mit.edu/gsea/
NULL
dir="/Users/kelsiereinaltt/Documents/GSEA.plot-Kelsie/R"
setwd(dir)
#remotes::install_github("sarah-innis/GSEA.plot")
#library(devtools)
#library(GSEA.plot)
#data(key)
#head(key)
#GO_mf_filename=database_key("GO molecular function")
#GO_mf_filename
#descriptive_names=database_key("all")
#head(descriptive_names)
#added############################################################################
dat = "/Users/kelsiereinaltt/Documents/GSEA.plot-Kelsie/deg.RData"
load(dat)
# function for getting indices of unique genes with min p-values
min.p.indices = function(dat=NULL){
ind_keep = c()
for(ii in 1:length(unique(dat$ID))){
ind = which(dat$ID == unique(dat$ID)[ii])
if(length(ind)==1){ind_keep = c(ind_keep, ind)}
if(length(ind)>1){
ind2 = which(dat$adj.P.Val[ind] == min(dat$adj.P.Val[ind]))
ind_keep = c(ind_keep, ind[ind2])
}
}
if(length(ind_keep)==length(unique(dat$ID))){return(ind_keep)}
}
# use gene ids for gtex
all(colnames(dat_F_gtex) == colnames(dat_M_gtex))
fname = "/Users/kelsiereinaltt/Documents/GSEApaper-Kelsie/gencode_gene_map.txt"
ann_gene0 = read.table(fname,header=T,sep="\t",stringsAsFactors=F,quote = "")
ggenes = sapply(colnames(dat_F_gtex),function(x){ann_gene0$gene_name[which(ann_gene0$gene_id==x)]})
colnames(dat_F_gtex) = colnames(dat_M_gtex) = ggenes
# specify phenotypes
pheno.input = list()
pheno.input[["phen"]] = c("Female","Male")
pheno.input[["class.v"]] = c(rep(0,nrow(dat_F_gtex)), rep(1,nrow(dat_M_gtex)))
# format expression data
expr.input = cbind(t(dat_F_gtex), t(dat_M_gtex)) %>% as.data.frame(stringsAsFactors=F)
# run GSEA.R and newGSEAplots.R
library(GSEA.plot)
# source("/Users/kelsiereinaltt/Documents/GSEApaper-Kelsie/GSEA.R")
# source("/Users/kelsiereinaltt/Documents/GSEApaper-Kelsie/newGSEAplots.R")
source("GSEA.1.0.sei3.R")
source("Run.GSEA.022319.R")
#added############################################################################
data(hallmark.gs)
d0 = hallmark.gs
#data(C1.gs)
#added##############################
# KLF14 targets
data(transf)
data(transm)
tx = t(c("KLF14targets","source",transf[,1],transm[,1]))
d1 = add_to_database(database=d0, addition=tx)
# receptors/ligands
data(Kadoki_ligands.db)
data(Kadoki_receptors.db)
d2 = c(d1, Kadoki_ligands.db, Kadoki_receptors.db)
# transcription factors
data(ENCODE.db)
d3 = c(d2, ENCODE.db)
#added##############################
#
# sets=get_genesets(hallmark.gs)
# head(sets)
#
# data(aagmex_expr)
# expr.input=aagmex_expr
# expr.input[1:4,1:6]
#
# data(aagmex_pheno)
# pheno.input=aagmex_pheno
# pheno.input$phen
# head(pheno.input$class.v)
#
# data(hallmark.gs)
# gene.set.input=hallmark.gs
pp= GSEAplots(input.ds.name=expr.input,
input.cls.name=pheno.input,
#gene.set.input=gene.set.input,
gene.set.input=d3,
doc.string="kTest-6",
nperm=100,#supposed to be 1000
fdr.q.val.threshold = 0.25,
abs.val=F,
gs.size.threshold.max=1000,
bar_percent=0.1,
gap_percent=0.1,
under_percent=0.1,
upper_percent=0.1,
color_line="black",
color_tick="green")
pp$plots[[1]]
plot.ES(list.of.plots=pp$plots,plotname="kTest-6")
dir="/Users/kelsiereinaltt/Documents/GSEA.plot-Kelsie/R"
setwd(dir)
#remotes::install_github("sarah-innis/GSEA.plot")
#library(devtools)
#library(GSEA.plot)
#data(key)
#head(key)
#GO_mf_filename=database_key("GO molecular function")
#GO_mf_filename
#descriptive_names=database_key("all")
#head(descriptive_names)
#added############################################################################
dat = "/Users/kelsiereinaltt/Documents/GSEA.plot-Kelsie/deg.RData"
load(dat)
# function for getting indices of unique genes with min p-values
min.p.indices = function(dat=NULL){
ind_keep = c()
for(ii in 1:length(unique(dat$ID))){
ind = which(dat$ID == unique(dat$ID)[ii])
if(length(ind)==1){ind_keep = c(ind_keep, ind)}
if(length(ind)>1){
ind2 = which(dat$adj.P.Val[ind] == min(dat$adj.P.Val[ind]))
ind_keep = c(ind_keep, ind[ind2])
}
}
if(length(ind_keep)==length(unique(dat$ID))){return(ind_keep)}
}
# use gene ids for gtex
all(colnames(dat_F_gtex) == colnames(dat_M_gtex))
fname = "/Users/kelsiereinaltt/Documents/GSEApaper-Kelsie/gencode_gene_map.txt"
ann_gene0 = read.table(fname,header=T,sep="\t",stringsAsFactors=F,quote = "")
ggenes = sapply(colnames(dat_F_gtex),function(x){ann_gene0$gene_name[which(ann_gene0$gene_id==x)]})
colnames(dat_F_gtex) = colnames(dat_M_gtex) = ggenes
# specify phenotypes
pheno.input = list()
pheno.input[["phen"]] = c("Female","Male")
pheno.input[["class.v"]] = c(rep(0,nrow(dat_F_gtex)), rep(1,nrow(dat_M_gtex)))
# format expression data
expr.input = cbind(t(dat_F_gtex), t(dat_M_gtex)) %>% as.data.frame(stringsAsFactors=F)
# run GSEA.R and newGSEAplots.R
library(GSEA.plot)
# source("/Users/kelsiereinaltt/Documents/GSEApaper-Kelsie/GSEA.R")
# source("/Users/kelsiereinaltt/Documents/GSEApaper-Kelsie/newGSEAplots.R")
source("GSEA.1.0.sei3.R")
source("Run.GSEA.022319.R")
#added############################################################################
data(hallmark.gs)
d0 = hallmark.gs
#data(C1.gs)
#added##############################
# KLF14 targets
data(transf)
data(transm)
tx = t(c("KLF14targets","source",transf[,1],transm[,1]))
d1 = add_to_database(database=d0, addition=tx)
# receptors/ligands
data(Kadoki_ligands.db)
data(Kadoki_receptors.db)
d2 = c(d1, Kadoki_ligands.db, Kadoki_receptors.db)
# transcription factors
data(ENCODE.db)
d3 = c(d2, ENCODE.db)
#added##############################
#
# sets=get_genesets(hallmark.gs)
# head(sets)
#
# data(aagmex_expr)
# expr.input=aagmex_expr
# expr.input[1:4,1:6]
#
# data(aagmex_pheno)
# pheno.input=aagmex_pheno
# pheno.input$phen
# head(pheno.input$class.v)
#
# data(hallmark.gs)
# gene.set.input=hallmark.gs
pp= GSEAplots(input.ds.name=expr.input,
input.cls.name=pheno.input,
#gene.set.input=gene.set.input,
gene.set.input=d3,
doc.string="kTest-6",
nperm=100,#supposed to be 1000
fdr.q.val.threshold = 0.25,
abs.val=F,
gs.size.threshold.max=1000,
bar_percent=0.1,
gap_percent=0.1,
under_percent=0.1,
upper_percent=0.1,
color_line="black",
color_tick="green")
pp$plots[[1]]
plot.ES(list.of.plots=pp$plots,plotname="kTest-6")
existing.set <- is.element(gene.set.tags, gene.labels)
gs.db
load(gs.db)
read.table(gs.db)
wd
dir
setwd("/Users/kelsiereinaltt/Documents/GSEA.plot-Kelsie/")
dir
dir <- "/Users/kelsiereinaltt/Documents/GSEA.plot-Kelsie/""
dir <- "/Users/kelsiereinaltt/Documents/GSEA.plot-Kelsie/"
dir
gs.db <- data("hallmark.gs")
gs.db
data("hallmark.gs")
hey <- 1
data("hallmark.gs")
dat = "/Users/kelsiereinaltt/Documents/GSEA.plot-Kelsie/deg.RData"
load(dat)
gs.db = "/Users/kelsiereinaltt/Documents/GSEA.plot-Kelsie/deg.RData"
load(gs.db)
temp <- gs.db
gs.db = "/Users/kelsiereinaltt/Documents/GSEA.plot-Kelsie/deg.RData"
load(gs.db)
if (regexpr(pattern=".gmt", gs.db[1]) == -1) {
temp <- gs.db
} else {
temp <- readLines(gs.db)
}
max.Ng <- length(temp)
temp.size.G <- vector(length = max.Ng, mode = "numeric")
for (i in 1:max.Ng) {
temp.size.G[i] <- length(unlist(strsplit(temp[[i]], "\t"))) - 2
}
max.size.G <- max(temp.size.G)
gs <- matrix(rep("null", max.Ng*max.size.G), nrow=max.Ng, ncol= max.size.G)
temp.names <- vector(length = max.Ng, mode = "character")
temp.desc <- vector(length = max.Ng, mode = "character")
gs.count <- 1
for (i in 1:max.Ng) {
temp.size.G[i] <- length(unlist(strsplit(temp[[i]], "\t"))) - 2
}
max.size.G <- max(temp.size.G)
gs <- matrix(rep("null", max.Ng*max.size.G), nrow=max.Ng, ncol= max.size.G)
temp.names <- vector(length = max.Ng, mode = "character")
temp.desc <- vector(length = max.Ng, mode = "character")
gs.count <- 1
gene.set.reference<- vector(length = max.Ng, mode = "character")
gene.set.reference.matrix <- rep(list(NA),max.Ng)
for (i in 1:max.Ng) {
gene.set.size <- length(unlist(strsplit(temp[[i]], "\t"))) - 2
gs.line <- noquote(unlist(strsplit(temp[[i]], "\t")))
gene.set.reference[i] <- gs.line[1]
gene.set.name <- gs.line[1]
gene.set.desc <- gs.line[2]
gene.set.tags <- vector(length = gene.set.size, mode = "character")
for (j in 1:gene.set.size) {
gene.set.tags[j] <- gs.line[j + 2]
}
gene.set.reference.matrix[[i]] <- gene.set.tags
existing.set <- is.element(gene.set.tags, gene.labels)
set.size <- length(existing.set[existing.set == T])
#removes genesets that do not fit the size requirements
if ((set.size < gs.size.threshold.min) || (set.size > gs.size.threshold.max)) next
temp.size.G[gs.count] <- set.size
gs[gs.count,] <- c(gene.set.tags[existing.set], rep("null", max.size.G - temp.size.G[gs.count]))
temp.names[gs.count] <- gene.set.name
temp.desc[gs.count] <- gene.set.desc
gs.count <- gs.count + 1
}
remove.packages("GSEAplot")
library(GSEAplot)
